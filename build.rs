use protoc_rust::Customize;
use glob::glob;
use std::fs;
use std::path::Path;
use std::env;
use walkdir::WalkDir;
use std::io::Write;

fn main() {
    let proto_root = "./proto";
    let generated_root = "./src/generated";
    let generated_root_absolute = Path::new(generated_root).canonicalize().unwrap();
    println!("cargo:rerun-if-changed={}", proto_root);

    let current_dir = env::current_dir().unwrap();
    env::set_current_dir(proto_root).unwrap();

    // compile proto.
    for path in glob("./**/*.proto").unwrap().filter_map(Result::ok) {
        let dir = generated_root_absolute.join(path.parent().unwrap());
        fs::create_dir_all(&dir).unwrap();
        let path = path.to_str().expect("").to_owned();

        protoc_rust::run(protoc_rust::Args {
            out_dir: dir.to_str().unwrap(),
            input: &[path.as_str()],
            includes: &["./"],
            customize: Customize {
                ..Default::default()
            },
        }).expect("Failed to compile proto.");
    }

    env::set_current_dir(current_dir).unwrap();

    // generate mod.rs.
    for dir in WalkDir::new(generated_root)
        .into_iter()
        .filter_map(Result::ok)
        .filter(|e| e.file_type().is_dir()) {

        let mods: Vec<String> =  WalkDir::new(dir.path())
            .min_depth(1)
            .max_depth(1)
            .into_iter()
            .filter_map(Result::ok)
            .map(|e| e.path().file_stem().unwrap().to_str().unwrap().to_owned())
            .filter(|e| !e.starts_with("."))
            .filter(|e| e != "mod")  // skip mod.rs
            .collect();

        let mut file = fs::File::create(dir.path().join("mod.rs")).unwrap();
        write!(file, "// generated by build.rs\n").unwrap();
        for name in mods.iter() {
            write!(file, "pub mod {};\n", name).unwrap();
        }
    }

}
